// Generated by CoffeeScript 1.9.2
(function() {
  var countIntervalsBetweenNearbyPeaks, getPeaksAtThreshold, groupNeighborsByTempo;

  getPeaksAtThreshold = function(data, threshold) {
    var i, length, peaksArray;
    length = data.length;
    peaksArray = [];
    i = 0;
    while (i < length) {
      if (data[i] > threshold) {
        peaksArray.push(i);
        i += 10000;
      }
      i++;
    }
    return peaksArray;
  };

  countIntervalsBetweenNearbyPeaks = function(peaks) {
    var intervalCounts;
    intervalCounts = [];
    peaks.forEach(function(peak, index) {
      var foundInterval, i, interval;
      i = 0;
      while (i < 10) {
        interval = peaks[index + i] - peak;
        foundInterval = intervalCounts.some(function(intervalCount) {
          if (intervalCount.interval === interval) {
            return intervalCount.count++;
          }
        });
        if (!foundInterval) {
          intervalCounts.push({
            interval: interval,
            count: 1
          });
        }
        i++;
      }
    });
    return intervalCounts;
  };

  groupNeighborsByTempo = function(intervalCounts, sampleRate) {
    var tempoCounts;
    tempoCounts = [];
    intervalCounts.forEach(function(intervalCount, i) {
      var foundTempo, tempo;
      if (intervalCount.interval !== 0) {
        tempo = 60 / (intervalCount.interval / sampleRate);
        while (tempo < 90) {
          tempo *= 2;
        }
        while (tempo > 180) {
          tempo /= 2;
        }
        tempo = Math.round(tempo);
        foundTempo = tempoCounts.some(function(tempoCount) {
          if (tempoCount.tempo === tempo) {
            return tempoCount.count += intervalCount.count;
          }
        });
        if (!foundTempo) {
          tempoCounts.push({
            tempo: tempo,
            count: intervalCount.count
          });
        }
      }
    });
    return tempoCounts;
  };

  window.onload = function() {
    var audioTag, context, isPlaying, playButton, preview, request;
    audioTag = document.getElementById("audio");
    preview = document.getElementById("preview").innerHTML;
    audioTag.src = preview;
    isPlaying = false;
    playButton = document.getElementById("play");
    playButton.addEventListener('click', function() {
      if (isPlaying) {
        isPlaying = false;
        return audioTag.pause();
      } else {
        isPlaying = true;
        return audioTag.play();
      }
    });
    context = new AudioContext();
    request = new XMLHttpRequest();
    request.open('GET', preview, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      context.decodeAudioData(request.response, (function(buffer) {
        var filter, offlineContext, source;
        offlineContext = new OfflineAudioContext(1, buffer.length, buffer.sampleRate);
        source = offlineContext.createBufferSource();
        source.buffer = buffer;
        filter = offlineContext.createBiquadFilter();
        filter.type = 'lowpass';
        source.connect(filter);
        filter.connect(offlineContext.destination);
        source.start(0);
        offlineContext.startRendering();
        offlineContext.oncomplete = function(s) {
          var filteredBuffer, groups, initThreshold, intervals, minPeaks, minThreshold, peaks, threshold, top;
          filteredBuffer = s.renderedBuffer;
          initThreshold = 0.9;
          threshold = initThreshold;
          minThreshold = 0.3;
          minPeaks = 30;
          while (true) {
            peaks = getPeaksAtThreshold(s.renderedBuffer.getChannelData(0), threshold);
            threshold -= 0.05;
            if (!(peaks.length < minPeaks && threshold >= minThreshold)) {
              break;
            }
          }
          intervals = countIntervalsBetweenNearbyPeaks(peaks);
          groups = groupNeighborsByTempo(intervals, filteredBuffer.sampleRate);
          top = groups.sort(function(i1, i2) {
            return i2.count - i1.count;
          }).splice(0, 5);
          document.getElementById('bpm').innerHTML = top[0].tempo;
        };
      }), function() {});
    };
    request.send();
  };

}).call(this);
